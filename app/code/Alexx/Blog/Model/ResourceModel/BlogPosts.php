<?php
declare(strict_types=1);

namespace Alexx\Blog\Model\ResourceModel;

use Alexx\Blog\Api\Data\BlogInterface;
use Magento\Catalog\Model\ImageUploader;
use Magento\Framework\Model\ResourceModel\Db\AbstractDb;
use Magento\Store\Model\StoreManagerInterface;
use Magento\Framework\Model\ResourceModel\Db\Context;
use Magento\Framework\Model\AbstractModel;

/**
 * BlogPosts ResourceModel
 */
class BlogPosts extends AbstractDb
{
    /**@var ImageUploader */
    private $imageUploader;

    /**@var StoreManagerInterface */
    private $storeManager;

    /**
     * Constructor
     *
     * @param Context $context
     * @param ImageUploader $imageUploader
     * @param StoreManagerInterface $storeManager
     * @param string $connectionName
     */
    public function __construct(
        Context $context,
        ImageUploader $imageUploader,
        StoreManagerInterface $storeManager,
        $connectionName = null
    ) {
        $this->storeManager = $storeManager;
        $this->imageUploader = $imageUploader;
        parent::__construct($context, $connectionName);
    }

    /**
     * @inheritDoc
     */
    public function save(AbstractModel $object)
    {
        $pictureData = $object->getData(BlogInterface::FIELD_PICTURE);

        if (is_array($pictureData)) {
            if (isset($pictureData[0]['file'])) {
                $newImgRelativePath = $this->imageUploader->moveFileFromTmp($pictureData[0]['file'], true);
                $pictureData = [[
                    'name' => $newImgRelativePath,
                    'url' => '/' . $this->getBaseMediaDir() . '/' . $newImgRelativePath
                ]];
                $object->setData(BlogInterface::FIELD_PICTURE, $pictureData);
            }
        }
        if (is_array($pictureData)) {
            $pictureData = $pictureData[0]['url'];
            $object->setData(BlogInterface::FIELD_PICTURE, $pictureData);
        }

        return parent::save($object); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    protected function _construct()
    {
        $this->_init(BlogInterface::BLOG_TABLE, BlogInterface::BLOG_ID);
    }

    /**
     * Retrieve base media directory path
     *
     * @return string
     */
    private function getBaseMediaDir()
    {
        return $this->storeManager->getStore()->getBaseMediaDir();
    }
}
